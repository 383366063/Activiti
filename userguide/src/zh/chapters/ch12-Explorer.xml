<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="activitiExplorer">

  <title>Activiti Explorer</title>
  
  <para>
	Activiti Explorer，我习惯称之为Activiti控制台，后面也这么翻译。Activiti控制台是一个web应用程序，当我们从Activiti的官方网站下载Activiti的压缩zip文件时候，Activiti控制台在${Activiti_home}/wars文件夹下面。该控制台的目的并不是创建一个完善的web应用程序，仅仅是为客户端用户准备的应用程序，但是却能够练习和展示Activiti的功能。正如这样，控制台仅仅只是一个Demo，
	可能有人会使用该控制台集成到他们自己的系统之中。另外，对于该控制台，我们使用了一个内存数据库，但是它却很容易的换成你自己的数据库（查看WEB-INF文件夹下面的applicationContext.xml文件）。
  </para>
  <para> 
	随后，登录进该控制台，你将会看见四个比较大的图标按钮用于显示主要功能。
    <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.tabs.png"/></imageobject></mediaobject>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="bold">Tasks</emphasis>: 任务管理功能。
		  这里，如果你是办理人，你可以看见运行中流程实例的自己的待办任务，或者你可以拾取组任务。
		  控制台涉及的功能，子任务的工作，不同角色的人，等等...控制台也可以允许创建一个独立的任务，该任务并没有关联任何流程实例。
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Process</emphasis>: 
		  显示部署的流程定义列表，并且可以启动一个新的流程实例。
        </para>
      </listitem>
       <listitem>
        <para>
          <emphasis role="bold">Reporting</emphasis>: 
		  生成报表和显示之前保存历史的结果数据。查看<link linkend="explorer.reporting">报表这一节</link>可以获取更多的信息。
		</para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Manage</emphasis>: 
		  当登录的用户具有超级管理员权限才能够看见。用于管理Activiti的流程引擎：管理用于和组，执行和查看停止的jobs，查看数据库和部署新的流程定义。
        </para>
      </listitem>
    </itemizedlist> 
  </para>
  
  <section>
  
    <title>流程图</title>
    
    <para>
	  控制台包含的功能，使用<ulink url="http://raphaeljs.com/">Raphaël</ulink>Javascript框架自动生成一张流程图。
	  当流程定义XML包含的BPMN注入信息时。该流程图才能够生成。当流程定义XML中并没有BPMN注入信息但是部署的时候包含一张流程图，那么该图片也将会被显示。
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.process.definition.image.png"/></imageobject></mediaobject>
    </para>
    <para>
	  当你并不想使用Javascript生成流程图，你可以在ui.properties文件中禁用它。
      <programlisting>activiti.ui.jsdiagram = false</programlisting>
    </para>
    <para>
		除了在控制台上面显示流程图，控制台也会很容易的包含你想要查看的流程图。
		下面的URL将会显示流程定义图片，根据留存定义的ID：
      <programlisting>http://localhost:8080/activiti-explorer/diagram-viewer/index.html?processDefinitionId=reviewSaledLead:1:36</programlisting>
	   它也可以显示当前流程实例的状态，通过添加一个processInstanceId的请求参数，如下:
      <programlisting>http://localhost:8080/activiti-explorer/diagram-viewer/index.html?processDefinitionId=reviewSaledLead:1:36&amp;processInstanceId=41</programlisting>
    </para>
  </section>
  
  <section>
  
    <title>任务</title>
    
    <para>
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.tasks.png"/></imageobject></mediaobject>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Inbox:</emphasis>
			显示登录用户需要办理的所有任务列表。
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">My tasks:</emphasis> 
			显示登录用户任务拥有者的任务列表。当你创建一个独立的任务，你可以自动化操作该任务。
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">Queued:</emphasis> 
			显示不用的组任务列表，并且登录用户在该组中。这里的所有任务都必须先拾取然后才能够完成。
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">Involved:</emphasis> 
			显示登录用户被参与的任务（即不是办理人和任务拥有者）。
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">归档</emphasis>包含已经完成的（历史的）任务。
          </para>
        </listitem>
      </itemizedlist>
    </para>
  
  </section>
  
  <section>
  
    <title>启动流程实例</title>
    
    <para>
		在<emphasis role="bold">流程定义</emphasis>选项卡，允许你查看Activiti流程引擎部署的所有流程定义。你可以使用页面顶部右边的按钮启动一个新的流程实例。如果该流程定义有一个启动<link linkend="forms">表单</link>，
		那么在启动流程实例之前就先显示表单。
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.process.definitions.png"/></imageobject></mediaobject>
    </para>
  
  </section>
  
   <section>
  
    <title>我的流程实例</title>
    
    <para>
		在<emphasis role="bold">我的流程</emphasis> 选项卡，显示当前登录用户未完成的用户任务的所有流程实例。这也很直观的显示了流程实例的当前活动和存储的流程变量。
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.my.instances.png"/></imageobject></mediaobject>
    </para>
  



  </section>
  
    <section>
  
    <title>管理</title>
    
    <para>
	  在管理功能中，只有当登录用户只权限组<emphasis>admin</emphasis>中的成员时，该功能才会显示。当点击 <emphasis>Manage</emphasis> 图标按钮，提供以下选项列表
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">数据库:</emphasis> 
			在数据库中显示Activiti有关内容.当开发流程或者排除故障等问题的时候是非常有用的。
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.database.png"/></imageobject></mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">部署：</emphasis>
			显示当前流程引擎的部署，并且可以看见部署的内容（流程定义，流程图，业务规则，等等...）
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.deployments.png"/></imageobject></mediaobject>
			当你点击 <emphasis>部署</emphasis> 按钮时，你也可以上传新的部署。从自己的计算机中选择一个业务文档或者一个BPMN20.XML文件，或者简单的拖拽到指定的区域就可以部署一个新的业务流程。
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.upload.deployment.png"/></imageobject></mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Jobs（作业）:</emphasis> 
			在左边显示当前的作业（定时器，等等）并且运行手动执行他们（例如在截止时间之前触发定时器）。如果作业执行失败（例如邮件服务器不能正常工作），那么就会显示所有的异常。
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.jobs.png"/></imageobject></mediaobject>
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">用户和组</emphasis> 
			管理用户和组：创建，修改和删除用户和组。关联用户和组，这样他们就会有更多的权限或者他们能够看见在任务分配给特地的组。
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.users.png"/></imageobject></mediaobject>
          </para>
        </listitem>
      </itemizedlist>
       
    </para>
  
  </section>
  
  <section id="explorer.reporting">
  
    <title>报表</title>
    
    <para>
		控制台附带了一些报表例子并且有能力很轻松的在系统中添加新的报表。 报表功能是位于主功能中的<emphasis>'报表'</emphasis>按钮。
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.reporting.png"/></imageobject></mediaobject>
      <emphasis role="bold">重要</emphasis>: 
	  如果要让报表工作，控制台需要配置历史的级别不能够没有。这默认的配置是满足这一要求的。               
    </para>
    
    <para>
		目前，该报表选项卡会显示2个子选项卡：

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">生成报表</emphasis>: 
					显示系统中已知的报表列表。允许运行生成的报表。
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">保存报表</emphasis>: 
					显示之前保存的所有报表列表。注意，这里仅仅显示的是个人保存的报表，并且不能看见其他人保存的报表。
                </para>
            </listitem>
        </itemizedlist>
    </para>
    
    <para>
		流程的数据被用于生成报表中的列表和图标。第一次看上去可能会很奇怪，使用流程生成报表数据有几个优势。
      <itemizedlist>
        <listitem>
            <para>
				该流程能够直接访问Activiti流程引擎的内部。他直接可以使用流程引擎访问数据库.
            </para>
        </listitem>
        <listitem>
            <para>
				作业执行器能够用于任何其他的流程。这意味着你能够异步生存流程或者仅仅异步执行某些步骤。这也意味着你可以使用定时器，例如在某些时间点上面生成报表数据。
            </para>
        </listitem>
        <listitem>
            <para>
				可以用已知的工具和已知的概念创建一个新的报表。同时，没有新的概念，服务或者应用被需要。部署或者上传一个新的报表与部署一个新的流程是一样的。
            </para>
        </listitem>
        <listitem>
            <para>
				它也允许使用BPMN2.0结构。这意味着所有的东西如同并行步骤，基于数据的分支或者甚至是用户输入的请求时另外也可能产生。
                It allows to use the BPMN 2.0 constructs. This means that all things like 
                parallel steps, do branching based on data or even request user input during the generation
                are possible out-of-the-box.
            </para>
        </listitem>
      </itemizedlist> 
      
      Process definitions that generate report data need to have <emphasis role="bold">'activiti-report' as category</emphasis> 
      to be seen in the list of known reports in Explorer. A 'report process' can be as simple or as complex as wanted.
      The only requirement to actually be able to see the report, is that the process produces a variable
      called <emphasis role="bold">reportData</emphasis> is created. This variable must be a byte array representation
      of a json object. This variable is stored in the hisory tables of Activiti
      (hence the requirement that history must be enabled for the engine) so it can be retrieved later 
      when the report is saved. 
      <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.reporting.explained.png"/></imageobject></mediaobject>
    </para>
    
    <section id="explorer.reporting.json">
    
        <title>Report data JSON</title>
        
        <para>
          A report process must generate a variable <emphasis>reportData</emphasis> that is a JSON representation
          of the data that must be displayed to the user. The json should look as follows:
          <programlisting>
{
  &quot;title&quot;: &quot;My Report&quot;,
  &quot;datasets&quot;: [
    {
      &quot;type&quot; : &quot;lineChart&quot;,
      &quot;description&quot; : &quot;My first chart&quot;,
      &quot;xaxis&quot; : &quot;Category&quot;
      &quot;yaxis&quot; : &quot;Total sales&quot;
      &quot;data&quot; : 
      {
        &quot;A&quot; : 50,
        &quot;B&quot; : 33,
        &quot;C&quot; : 17,
        &quot;D&quot; : 87,
      }
    }
  ]
}          
          </programlisting>
          This json will be fetched at runtime in Explorer and will be used to generate 
          charts or lists. The elements in the json are:
          <itemizedlist>
            <listitem>
                <para><emphasis role="bold">title</emphasis>: this is the general title for the whole report</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">datasets</emphasis>: this is an array of datasets corresponding with
                the different charts and lists on the report.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">type</emphasis>Each dataset has a type. This type will be used
                to determine how the data will be rendered. Currently supported values are:
                <emphasis role="bold">pieChart, lineChart, barChart and list.</emphasis></para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">description</emphasis>: each chart can have an optional description
                that will be shown in the report.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">x- and yaxis</emphasis>: only usable for type <emphasis>lineChart</emphasis>.
                Optional parameter that determines the name of the axes of the chart</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">data</emphasis>: this is the actual data. The data is a json 
                object with key-value elements.</para>
            </listitem>
          </itemizedlist>
        </para>
        
    </section>
    
    <section id="explorer.reporting.example">
    
        <title>Example process</title>
        
        <para>
            The following example shows a 'process instance overview' report. The process itself is very easy and
            contains only a script task (besides start and end) that generates the json dataset using javascript. Altough all of the 
            examples in Explorer use scripting, this can very well be done using Java service tasks. The end result of
            running the process should just be the <emphasis>reportData</emphasis> variable that contains the data.
        </para>
        
        <para>
            <emphasis role="bold">Important note:</emphasis> The following example only works on JDK 7+.
            The reason for this is that the javascript engine (<emphasis>Rhino</emphasis>) that is shipped
            with older JDK versions isn't advanced enough to cope with some constructs needed to write
            scripts like the one below. See below for a JDK 6+ compliant example.
        </para>
        
        <para>
            <programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;definitions xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
    xmlns:bpmndi=&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot; xmlns:omgdc=&quot;http://www.omg.org/spec/DD/20100524/DC&quot;
    xmlns:omgdi=&quot;http://www.omg.org/spec/DD/20100524/DI&quot; typeLanguage=&quot;http://www.w3.org/2001/XMLSchema&quot;
    expressionLanguage=&quot;http://www.w3.org/1999/XPath&quot; 
    targetNamespace=&quot;activiti-report&quot;&gt;

    &lt;process id=&quot;process-instance-overview-report&quot; name=&quot;Process Instance Overview&quot; isExecutable=&quot;true&quot;&gt;
    
        &lt;startEvent id=&quot;startevent1&quot; name=&quot;Start&quot; /&gt;
        &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;startevent1&quot; targetRef=&quot;generateDataset&quot; /&gt;
        
        &lt;scriptTask id=&quot;generateDataset&quot; name=&quot;Execute script&quot; scriptFormat=&quot;JavaScript&quot; activiti:autoStoreVariables=&quot;false&quot;&gt;
          &lt;script&gt;&lt;![CDATA[
          
               importPackage(java.sql);
               importPackage(java.lang);
               importPackage(org.activiti.explorer.reporting);
               
               var result = ReportingUtil.executeSelectSqlQuery(&quot;SELECT PD.NAME_, PD.VERSION_ , count(*) FROM ACT_HI_PROCINST PI inner join ACT_RE_PROCDEF PD on PI.PROC_DEF_ID_ = PD.ID_ group by PROC_DEF_ID_&quot;);
            
               var reportData = {};
               reportData.datasets = [];
               
               var dataset = {};
               dataset.type = &quot;pieChart&quot;;
               dataset.description = &quot;Process instance overview (&quot; + new java.util.Date() + &quot;)&quot;;
               dataset.data = {};
            
               while (result.next()) { // process results one row at a time
                 var name = result.getString(1);
                 var version = result.getLong(2)
                 var count = result.getLong(3);
                 dataset.data[name + &quot; (v&quot; + version + &quot;)&quot;] = count;
               }
               reportData.datasets.push(dataset);
               
               execution.setVariable(&quot;reportData&quot;, new java.lang.String(JSON.stringify(reportData)).getBytes(&quot;UTF-8&quot;));
          ]]&gt;&lt;/script&gt;
        &lt;/scriptTask&gt;
        &lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;generateDataset&quot; targetRef=&quot;theEnd&quot; /&gt;
        
        &lt;endEvent id=&quot;theEnd&quot; /&gt;
        
    &lt;/process&gt;

&lt;/definitions&gt;            
            </programlisting>
       </para>
       
       <para>    
            Besides the typical XML linea at the top of the process xml, the main difference is that the 
            <emphasis>targetNamespace</emphasis> is set to <emphasis role="bold">activiti-report</emphasis>,
            adding the category with the same name to the deployed process definition.
        </para>
        
        <para>
            The first lines of the script are just some imports to avoid having to type the package names
            all the time. The first line of interest is where the <emphasis>ReportingUtil</emphasis> is used
            to query the Activiti database. The result of that call is a regular <emphasis>JDBC Resultset</emphasis>.
            In the lines following the query, the javascript capabilities to easily create json is used. 
            The json that is produced matches <link linkend="explorer.reporting.json">the requirements</link>.
        </para>
        
        <para>
            The last line of the script may seem a bit odd. The first thing we need to do is to convert
            the json object to a string by using the javascript function <emphasis>JSON.stringify()</emphasis>.
            This string then needs to be stored as a byte array variable. The reason for this is technical:
            a byte array is unlimited in size while the string is not. That is why the javascript string
            must be converted to a Java string which has the capability to get the byte representation.
        </para>
        
        <para>
            The same process which is compatible with JDK 6 (and higher) looks a bit different. The native
            json capabilities cannot be used, hence some helper classes (<emphasis>ReportData</emphasis> and <emphasis>Dataset</emphasis>)
            are provided:
            <programlisting>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;definitions xmlns=&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:activiti=&quot;http://activiti.org/bpmn&quot;
    xmlns:bpmndi=&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot; xmlns:omgdc=&quot;http://www.omg.org/spec/DD/20100524/DC&quot;
    xmlns:omgdi=&quot;http://www.omg.org/spec/DD/20100524/DI&quot; typeLanguage=&quot;http://www.w3.org/2001/XMLSchema&quot;
    expressionLanguage=&quot;http://www.w3.org/1999/XPath&quot; 
    targetNamespace=&quot;activiti-report&quot;&gt;

    &lt;process id=&quot;process-instance-overview-report&quot; name=&quot;Process Instance Overview&quot; isExecutable=&quot;true&quot;&gt;
    
        &lt;startEvent id=&quot;startevent1&quot; name=&quot;Start&quot; /&gt;
        &lt;sequenceFlow id=&quot;flow1&quot; sourceRef=&quot;startevent1&quot; targetRef=&quot;generateDataset&quot; /&gt;
        
        &lt;scriptTask id=&quot;generateDataset&quot; name=&quot;Execute script&quot; scriptFormat=&quot;js&quot; activiti:autoStoreVariables=&quot;false&quot;&gt;
          &lt;script&gt;&lt;![CDATA[
          
               importPackage(java.sql);
               importPackage(java.lang);
               importPackage(org.activiti.explorer.reporting);
               
               var result = ReportingUtil.executeSelectSqlQuery(&quot;SELECT PD.NAME_, PD.VERSION_ , count(*) FROM ACT_HI_PROCINST PI inner join ACT_RE_PROCDEF PD on PI.PROC_DEF_ID_ = PD.ID_ group by PROC_DEF_ID_&quot;);




<emphasis role="bold">            
               var reportData = new ReportData;
               var dataset = reportData.newDataset();
               dataset.type = &quot;pieChart&quot;;
               dataset.description = &quot;Process instance overview (&quot; + new java.util.Date() + &quot;)&quot;
</emphasis>               
               
               while (result.next()) { // process results one row at a time
                 var name = result.getString(1);
                 var version = result.getLong(2);
                 var count = result.getLong(3);
                 <emphasis role="bold">dataset.add(name + &quot; (v&quot; + version + &quot;)&quot;, count);</emphasis>
               }
               
               execution.setVariable(&quot;reportData&quot;, reportData.toBytes());
               
          ]]&gt;&lt;/script&gt;
        &lt;/scriptTask&gt;
        &lt;sequenceFlow id=&quot;flow3&quot; sourceRef=&quot;generateDataset&quot; targetRef=&quot;theEnd&quot; /&gt;
        
        &lt;endEvent id=&quot;theEnd&quot; /&gt;
        
    &lt;/process&gt;

&lt;/definitions&gt;            
            </programlisting>
        </para>
    
    </section>
    
    <section id="explorer.reporting.start.form">
    
        <title>Report start forms</title>
        
        <para>
            As reports are generated by regular processes, the regular form capabilities can be used.
            Simply add a start form to the start event and Explorer will display the form to the user
            before generating the process.
            <programlisting>
&lt;startEvent id=&quot;startevent1&quot; name=&quot;Start&quot;&gt;
  &lt;extensionElements&gt;
    &lt;activiti:formProperty id=&quot;processDefinition&quot; name=&quot;Select process definition&quot; type=&quot;processDefinition&quot; required=&quot;true&quot; /&gt;
      &lt;activiti:formProperty id=&quot;chartType&quot; name=&quot;Chart type&quot; type=&quot;enum&quot; required=&quot;true&quot;&gt;
        &lt;activiti:value id=&quot;pieChart&quot; name=&quot;Pie chart&quot; /&gt;
        &lt;activiti:value id=&quot;barChart&quot; name=&quot;Bar chart&quot; /&gt;
      &lt;/activiti:formProperty&gt;
  &lt;/extensionElements&gt;
&lt;/startEvent&gt;            
            </programlisting>
            which is rendered to the user as a typical form:
            <mediaobject><imageobject><imagedata align="center" fileref="images/explorer.reporting.start.form.png"/></imageobject></mediaobject>
            The form properties are submitted when starting the process and they are available
            as normal execution variables that can be used within the script that generates the data:
            <programlisting> var processDefinition = execution.getVariable("processDefinition");</programlisting>
        </para>
    
    </section>
    
    <section id="explorer.reporting.examples">
    
        <title>流程例子</title>
        
        <para>
			对于默认的，控制台包含4个报表例子：
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">Employee productivity(员工的工作效率)</emphasis>: 
						该报表开始使用一个表格显示折线图。
						this report 
                        demonstrates the use of a line chart and using a a start form.
                        The script in this report is also complexer as in the other examples,
                        as the data that is fetched is interpreted by the script before stored
                        in the report data.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Helpdesk - firstline vs escalated</emphasis>: shows the 
                        use of a pie chart and combines the result of two separate database queries.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Process instance overview</emphasis>: this is an example
                        of a report where multiple datasets are used. The report contains a pie chart
                        and a list view of the same data, thus showing how multiple datasets can be 
                        used to generate a page with several charts.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Task duration</emphasis>: another example of using a start form
                        and using the corresponding variables to build the SQL query dynamically.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    
    </section>
  
  </section>
  
  <section id="explorer.change.database">
    <title>修改数据库</title>  
    <para>
	   如果修改控制台例子所用的数据库，改变属性文件<literal>apps/apache-tomcat-6.x/webapps/activiti-explorer/WEB-INF/classes/db.properties</literal>。
	  同样，在类路径下放上合适的数据库驱动（Tomcat 共享类库或者在 <literal>apps/apache-tomcat-6.x/webapps/activiti-explorer/WEB-INF/lib/</literal>中）
    </para>
  </section>
  
</chapter>
