<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>
  <title>配置</title>

  <section id="configuration">
    <title>创建ProcessEngine</title>

    <para>
    Activiti流程引擎的配置文件是名为<literal>activiti.cfg.xml</literal>的XML文件。
    注意这与使用<link linkend="springintegration">Spring方式创建流程引擎</link>
    是<emphasis role="bold">不</emphasis>一样的。
    </para>

    <para>
    获得<literal>ProcessEngine</literal>最简单的办法是
    使用<literal>org.activiti.engine.ProcessEngines</literal>类：
    <programlisting>ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine()</programlisting>
    它会在classpath下搜索<literal>activiti.cfg.xml</literal>，
    并基于这个文件中的配置构建引擎。
    下面代码展示了实例配置。
    后面的章节会给出配置参数的详细介绍。
    <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

  &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;

    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot; /&gt;
    &lt;property name=&quot;jdbcDriver&quot; value=&quot;org.h2.Driver&quot; /&gt;
    &lt;property name=&quot;jdbcUsername&quot; value=&quot;sa&quot; /&gt;
    &lt;property name=&quot;jdbcPassword&quot; value=&quot;&quot; /&gt;

    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;

    &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;

    &lt;property name=&quot;mailServerHost&quot; value=&quot;mail.my-corp.com&quot; /&gt;
    &lt;property name=&quot;mailServerPort&quot; value=&quot;5025&quot; /&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
    </para>

    <para>
      注意配置XML文件其实是一个spring的配置文件。
      <emphasis role="bold">但不是说Activiti只能用在Spring环境中！</emphasis>
      我们只是利用了Spring的解析和依赖注入功能
      来构建引擎。
    </para>

    <para>
      配置文件中使用的ProcessEngineConfiguration可以通过编程方式创建。
      可以配置不同的bean id（比如，第三行）。
      <programlisting>
ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();
ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);
ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);
ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);
ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);</programlisting>
   也可以不使用配置文件，基于默认创建配置
   （参考<link linkend="configurationClasses">各种支持类</link>）
   <programlisting>
ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();
ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();</programlisting>
   所有这些<literal>ProcessEngineConfiguration.createXXX()</literal>方法都返回
   <literal>ProcessEngineConfiguration</literal>，后续可以调整成所需的对象。
   在调用<literal>buildProcessEngine()</literal>后，
   就会创建一个<literal>ProcessEngine</literal>：
   <programlisting>
ProcessEngine processEngine = ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration()
  .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)
  .setJdbcUrl("jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000")
  .setJobExecutorActivate(true)
  .buildProcessEngine();</programlisting>
    </para>

  </section>

  <section id="configurationRoot">
    <title>ProcessEngineConfiguration bean</title>
    <para>
      <literal>activiti.cfg.xml</literal>必须包含一个id为<literal>'processEngineConfiguration'</literal>的bean。
      <programlisting> &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;</programlisting>
      这个bean会用来构建<literal>ProcessEngine</literal>。
      有多个类可以用来定义<literal>processEngineConfiguration</literal>。
      这些类对应不同的环境，并设置了对应的默认值。
      最好选择（最）适用于你的环境的类，
      这样可以少配置几个引擎的参数。
      下面是目前可以使用的类（以后会包含更多）：
      <itemizedlist id="configurationClasses">
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration</emphasis>:
            单独运行的流程引擎。Activiti会自己处理事务。
            默认，数据库只在引擎启动时检测
            （如果没有Activiti的表或者表结构不正确就会抛出异常）。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration</emphasis>:
            单元测试时的辅助类。Activiti会自己控制事务。
            默认使用H2内存数据库。数据库表会在引擎启动时创建，关闭时删除。
            使用它时，不需要其他配置（除非使用job执行器或邮件功能）。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.spring.SpringProcessEngineConfiguration</emphasis>:
            在Spring环境下使用流程引擎。
            参考<link linkend="springintegration">Spring集成章节</link>。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration</emphasis>:
            单独运行流程引擎，并使用JTA事务。
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="databaseConfiguration">
    <title>数据库配置</title>
    <para>
      Activiti可能使用两种方式配置数据库。
      第一种方式是定义数据库配置参数：
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">jdbcUrl</emphasis>: 数据库的JDBC URL。
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcDriver</emphasis>: 对应不同数据库类型的驱动。
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcUsername</emphasis>: 连接数据库的用户名。
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcPassword</emphasis>: 连接数据库的密码。
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      基于JDBC参数配置的数据库连接
      会使用默认的<ulink url="http://www.mybatis.org/">MyBatis</ulink>连接池。
      下面的参数可以用来配置连接池（来自MyBatis参数）：
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">jdbcMaxActiveConnections</emphasis>:
            连接池中处于被使用状态的连接的最大值。默认为10。
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxIdleConnections</emphasis>:
            连接池中处于空闲状态的连接的最大值。
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxCheckoutTime</emphasis>:
            连接被取出使用的最长时间，超过时间会被强制回收。
            默认为20000（20秒）。
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxWaitTime</emphasis>:
            这是一个底层配置，让连接池可以在长时间无法获得连接时，
            打印一条日志，并重新尝试获取一个连接。（避免因为错误配置导致沉默的操作失败）。
            默认为20000（20秒）。
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      示例数据库配置：
      <programlisting>
&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot; /&gt;
&lt;property name=&quot;jdbcDriver&quot; value=&quot;org.h2.Driver&quot; /&gt;
&lt;property name=&quot;jdbcUsername&quot; value=&quot;sa&quot; /&gt;
&lt;property name=&quot;jdbcPassword&quot; value=&quot;&quot; /&gt;
      </programlisting>
    </para>

    <para>
      也可以使用<literal>javax.sql.DataSource</literal>。
      （比如，<ulink url="http://commons.apache.org/dbcp/">Apache Commons</ulink>的DBCP）：
      <programlisting>
&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; &gt;
  &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;
  &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/activiti&quot; /&gt;
  &lt;property name=&quot;username&quot; value=&quot;activiti&quot; /&gt;
  &lt;property name=&quot;password&quot; value=&quot;activiti&quot; /&gt;
  &lt;property name=&quot;defaultAutoCommit&quot; value=&quot;false&quot; /&gt;
&lt;/bean&gt;

&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;

    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
    ...
      </programlisting>
      注意，Activiti的发布包中没有这些类。
      你要自己把对应的类（比如，从DBCP里）放到你的classpath下。
    </para>

    <para>
      无论你使用JDBC还是DataSource的方式，都可以设置下面的配置：
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">databaseType</emphasis>:
            一般不用设置，因为可以自动通过数据库连接的元数据获取。
            只有自动检测失败时才需要设置。
            可能的值有：{h2, mysql, oracle, postgres, mssql, db2}。
            <emphasis role="bold">如果没使用默认的H2数据库就必须设置这项</emphasis>。
            这个配置会决定使用哪些创建/删除脚本和查询语句。
            参考<link linkend="supporteddatabases">支持数据库章节</link>
            了解支持哪些类型。
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">databaseSchemaUpdate</emphasis>:
            设置流程引擎启动和关闭时如何处理数据库表。
            <itemizedlist>
              <listitem>
                <para>
                  <literal>false</literal>（默认）：检查数据库表的版本和依赖库的版本，
                  如果版本不匹配就抛出异常。

                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>true</literal>: 构建流程引擎时，执行检查，如果需要就执行更新。
                  如果表不存在，就创建。

                </para>
              </listitem>
               <listitem>
                <para>
                  <literal>create-drop</literal>: 构建流程引擎时创建数据库表，
                  关闭流程引擎时删除这些表。
                </para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="supporteddatabases">
    <title>支持的数据库</title>
    <para>下面列出Activiti使用的数据库类型（大小写敏感）。</para>
    <table id="databaseTypes">
      <title>支持的数据库</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>Activiti数据库类型</entry>
            <entry>测试版本</entry>
            <entry>JDBC URL实例</entry>
            <entry>备注</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>h2</entry>
            <entry>1.3.168</entry>
            <entry>jdbc:h2:tcp://localhost/activiti</entry>
            <entry>默认配置的数据库</entry>
          </row>
          <row>
            <entry>mysql</entry>
            <entry>5.1.21</entry>
            <entry>jdbc:mysql://localhost:3306/activiti?autoReconnect=true</entry>
            <entry>使用mysql-connector-java驱动测试</entry>
          </row>
          <row>
            <entry>oracle</entry>
            <entry>11.2.0.1.0</entry>
            <entry>jdbc:oracle:thin:@localhost:1521:xe</entry>
            <entry></entry>
          </row>
          <row>
            <entry>postgres</entry>
            <entry>8.1</entry>
            <entry>jdbc:postgresql://localhost:5432/activiti</entry>
            <entry></entry>
          </row>
          <row>
            <entry>db2</entry>
            <entry>DB2 10.1 using db2jcc4</entry>
            <entry>jdbc:db2://localhost:50000/activiti</entry>
            <entry></entry>
          </row>
          <row>
            <entry>mssql</entry>
            <entry>2008 using sqljdbc4</entry>
            <entry>jdbc:sqlserver://localhost:1433/activiti</entry>
            <entry></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="creatingDatabaseTable">

    <title>创建数据库表</title>

    <para>
      下面是创建数据库表最简单的办法：
      <itemizedlist>
        <listitem>
          <para>把activiti-engine的jar放到classpath下</para>
        </listitem>
        <listitem>
          <para>添加对应的数据库驱动</para>
        </listitem>
        <listitem>
          <para>把Activiti配置文件 (<emphasis>activiti.cfg.xml</emphasis>) 放到 classpath下，
          指向你的数据库（参考<link linkend="databaseConfiguration">数据库配置章节</link>）</para>
        </listitem>
        <listitem>
          <para>执行 <emphasis>DbSchemaCreate</emphasis> 类的main方法</para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
      然而，只有数据库管理员可以执行DDL语句。
      SQL DDL语句可以从Activiti下载页或Activiti发布目录里找到，在<literal>database</literal>子目录下。
      脚本也包含在引擎的jar中(<emphasis>activiti-engine-x.jar</emphasis>)，
      在<emphasis>org/activiti/db/create</emphasis>包下（<emphasis>drop</emphasis>目录里是删除语句）。
      SQL文件的命名方式如下
      <programlisting>activiti.{db}.{create|drop}.{type}.sql</programlisting>
      其中 <emphasis>db</emphasis> 是 <link linkend="supporteddatabases">支持的数据库</link>，
       <emphasis>type</emphasis> 是
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">engine:</emphasis> 引擎执行的表。必须。</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">identity:</emphasis> 包含用户，群组，用户与组之间的关系的表。
          这些表是可选的，只有使用引擎自带的默认身份管理时才需要。</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">history:</emphasis> 包含历史和审计信息的表。可选的：历史级别设为<emphasis>none</emphasis>时不会使用。
          注意这也会引用一些需要把数据保存到历史表中的功能（比如任务的评论）。</para>
        </listitem>
      </itemizedlist>
    </para>

  </section>

  <section id="database.tables.explained">
    <title>理解数据库表的命名</title>
    <para>
      Activiti的表都以<emphasis role="bold">ACT_</emphasis>开头。
      第二部分是表示表的用途的两个字母标识。
      用途也和服务的API对应。
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">ACT_RE_*</emphasis>: 'RE'表示<literal>repository</literal>。
            这个前缀的表包含了流程定义和流程静态资源
            （图片，规则，等等）。
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">ACT_RU_*</emphasis>: 'RU'表示<literal>runtime</literal>。
            这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。
            Activiti只在流程实例执行过程中保存这些数据，
            在流程结束时就会删除这些记录。
            这样运行时表可以一直很小速度很快。
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">ACT_ID_*</emphasis>: 'ID'表示<literal>identity</literal>。
            这些表包含身份信息，比如用户，组等等。
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">ACT_HI_*</emphasis>: 'HI'表示<literal>history</literal>。
            这些表包含历史数据，比如历史流程实例，
            变量，任务等等。
          </para>
        </listitem>
         <listitem>
          <para>
            <emphasis role="bold">ACT_GE_*</emphasis>: <literal>通用</literal>数据，
            用于不同场景下。
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="databaseUpgrade">
     <title>数据库升级</title>
     <para>在执行更新之前要先备份数据库
     （使用数据库的备份功能）
     </para>
     <para>默认，每次构建流程引擎时都会还行版本检测。
     这一版都在应用启动或Activiti webapp启动时发生。
     如果Activiti发现数据库表的版本与依赖库的版本不同，
     就会抛出异常。
     </para>
     <para>要升级，你要把下面的配置
     放到activiti.cfg.xml配置文件里：
     </para>
    <programlisting>&lt;beans ... &gt;

  &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
    &lt;!-- ... --&gt;
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
    &lt;!-- ... --&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
     <para> <emphasis role="bold">然后，把对应的数据库驱动放到classpath里。</emphasis>
     升级应用的Activiti依赖。启动一个新版本的Activiti
     指向包含旧版本的数据库。将<literal>databaseSchemaUpdate</literal>设置为<literal>true</literal>，
     Activiti会自动将数据库表升级到新版本，
     当发现依赖和数据库表版本不通过时。
     </para>
     <para> <emphasis role="bold">也可以执行更新升级DDL语句。</emphasis>
     也可以执行数据库脚本，可以在Activiti下载页找到。
     </para>
   </section>

  <section id="jobExecutorConfiguration">
    <title>启用Job执行器</title>
    <para><literal>JobExecutor</literal>是管理一系列线程的组件，可以触发定时器（也包含后续的异步消息）。
    在单元测试场景下，很难使用多线程。因此API允许查询(<literal>ManagementService.createJobQuery</literal>)和执行job
    (<literal>ManagementService.executeJob</literal>)，所以job可以在单元测试中控制。
    要避免与job执行器冲突，可以关闭它。
    </para>
    <para>
    默认，<literal>JobExecutor</literal>在流程引擎启动时就会激活。
    如果不想在流程引擎启动后自动激活<literal>JobExecutor</literal>，可以设置
   <programlisting>&lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /></programlisting>
    </para>
  </section>

  <section id="mailServerConfiguration">
    <title>配置邮件服务器</title>
    <para>
      可以选择配置邮件服务器。Activiti支持在业务流程中发送邮件。
      想真正的发送一个email，必须配置一个真实的SMTP邮件服务器。
      参考<link linkend="bpmnEmailTaskServerConfiguration">e-mail任务</link>。
    </para>
  </section>

  <section id="historyConfiguration">
    <title>配置历史</title>
    <para>
      可以选择定制历史存储的配置。你可以通过配置影响引擎的<link linkend="history">历史功能</link>。
      参考<link linkend="historyConfig">历史配置</link>。
      <programlisting>&lt;property name=&quot;history&quot; value=&quot;audit&quot; /&gt;</programlisting>
    </para>
  </section>

  <section id="exposingConfigurationBeans">
    <title>为表达式和脚本暴露配置</title>
    <para>默认，<literal>activiti.cfg.xml</literal>和你自己的Spring配置文件中所有bean
    都可以在表达式和脚本中使用。
    如果你想限制配置文件中的bean的可见性，
    可以配置流程引擎配置的beans配置。
    <literal>ProcessEngineConfiguration</literal>的beans是一个map。当你指定了这个参数，
    只有包含这个map中的bean可以在表达式和脚本中使用。
    通过在map中指定的名称来决定暴露的bean。
    </para>
  </section>
  <section id="processDefinitionCacheConfiguration">
    <title>配置部署缓存</title>
    <para>所有流程定义都被缓存了（解析之后）避免每次使用前都要访问数据库，
    因为流程定义数据是不会改变的。
    默认，不会限制这个缓存。如果想限制流程定义缓存，可以添加如下配置
    <programlisting>&lt;property name=&quot;processDefinitionCacheLimit&quot; value=&quot;10&quot; /&gt;</programlisting>
    这个配置会把默认的hashmap缓存替换成LRU缓存，来提供限制。
    当然，这个配置的最佳值跟流程定义的总数有关，
    实际使用中会具体使用多少流程定义也有关。</para>
    <para>也你可以注入自己的缓存实现。这个bean必须实现
    org.activiti.engine.impl.persistence.deploy.DeploymentCache接口：
    <programlisting>
&lt;property name=&quot;processDefinitionCache&quot;&gt;
  &lt;bean class=&quot;org.activiti.MyCache&quot; />
&lt;/property&gt;</programlisting></para>
     <para>有一个类似的配置叫<literal>knowledgeBaseCacheLimit</literal>和<literal>knowledgeBaseCache</literal>，
     它们是配置规则缓存的。只有流程中使用规则任务时才会用到。</para>
    </section>

  <section id="loggingConfiguration">
    <title>日志</title>
    <para>从Activiti 5.12开始，SLF4J被用作日志框架，替换了之前使用java.util.logging。
    所有日志（activiti, spring, mybatis等等）都转发给SLF4J
    允许使用你选择的日志实现。</para>
    <para><emphasis role="bold">默认activiti-engine依赖中没有提供SLF4J绑定的jar，
    需要根据你的实际需要使用日志框架。</emphasis>如果没有添加任何实现jar，SLF4J会使用NOP-logger，不使用任何日志，不会发出警告，而且什么日志都不会记录。
    可以通过<ulink url="http://www.slf4j.org/codes.html#StaticLoggerBinder">http://www.slf4j.org/codes.html#StaticLoggerBinder</ulink>了解这些实现。</para>

    <para>使用Maven，比如使用一个依赖（这里使用log4j），注意你还需要添加一个version：
    <programlisting>
&lt;dependency&gt;
  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting></para>

    <para>activiti-explorer和activiti-rest应用都使用了Log4j绑定。执行所有activiti-*模块的单元测试页使用了Log4j。</para>

    <para>
      <emphasis role="bold">特别提醒如果容器classpath中存在commons-logging：</emphasis>
	  为了把spring日志转发给SLF4J，需要使用桥接（参考<ulink url="http://www.slf4j.org/legacy.html#jclOverSLF4J">http://www.slf4j.org/legacy.html#jclOverSLF4J</ulink>）。
	  如果你的容器提供了commons-logging实现，请参考下面网页：<ulink url="http://www.slf4j.org/codes.html#release">http://www.slf4j.org/codes.html#release</ulink>来确保稳定性。
    </para>
    <para>
	  使用Maven的实例（忽略版本）：
      <programlisting>
&lt;dependency&gt;
  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
  &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
    </para>
  </section>

    <section id="MDC">

  <title>映射诊断上下文</title>

    <para>
		在5.13中，activiti支持slf4j的MDC功能。
		如下的基础信息会传递到日志中记录：
      <itemizedlist>
        <listitem>
            <para>
            流程定义Id标记为mdcProcessDefinitionID
            </para>
        </listitem>

        <listitem>
        <para>
            流程实例Id标记为mdcProcessInstanceID
            </para>
        </listitem>

        <listitem>
        <para>
            分支Id标记为mdcexecutionId
        </para>
        </listitem>
      </itemizedlist>


	  默认不会记录这些信息。可以配置日志使用期望的格式来显示它们，扩展通常的日志信息。
	  比如，下面的log4j配置定义会让日志显示上面提及的信息：
     <programlisting>
 log4j.appender.consoleAppender.layout.ConversionPattern =ProcessDefinitionId=%X{mdcProcessDefinitionID}
executionId=%X{mdcExecutionId} mdcProcessInstanceID=%X{mdcProcessInstanceID} mdcBusinessKey=%X{mdcBusinessKey} %m%n"
      </programlisting>
	  当系统进行高风险任务，日志必须严格检查时，这个功能就非常有用，比如要使用日志分析的情况。

    </para>
  </section>

</chapter>
